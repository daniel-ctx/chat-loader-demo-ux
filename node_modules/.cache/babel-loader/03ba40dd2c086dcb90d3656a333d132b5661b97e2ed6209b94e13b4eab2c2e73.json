{"ast":null,"code":"import _objectSpread from \"/Users/daniel/Desktop/chat-response/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { generate as generateColor } from '@ant-design/colors';\nimport { updateCSS } from \"@rc-component/util/es/Dom/dynamicCSS\";\nimport { getShadowRoot } from \"@rc-component/util/es/Dom/shadow\";\nimport warn from \"@rc-component/util/es/warning\";\nimport React, { useContext, useEffect } from 'react';\nimport IconContext from \"./components/Context\";\nfunction camelCase(input) {\n  return input.replace(/-(.)/g, (match, g) => g.toUpperCase());\n}\nexport function warning(valid, message) {\n  warn(valid, \"[@ant-design/icons] \".concat(message));\n}\nexport function isIconDefinition(target) {\n  return typeof target === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (typeof target.icon === 'object' || typeof target.icon === 'function');\n}\nexport function normalizeAttrs() {\n  let attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(attrs).reduce((acc, key) => {\n    const val = attrs[key];\n    switch (key) {\n      case 'class':\n        acc.className = val;\n        delete acc.class;\n        break;\n      default:\n        delete acc[key];\n        acc[camelCase(key)] = val;\n    }\n    return acc;\n  }, {});\n}\nexport function generate(node, key, rootProps) {\n  if (!rootProps) {\n    return /*#__PURE__*/React.createElement(node.tag, _objectSpread({\n      key\n    }, normalizeAttrs(node.attrs)), (node.children || []).map((child, index) => generate(child, \"\".concat(key, \"-\").concat(node.tag, \"-\").concat(index))));\n  }\n  return /*#__PURE__*/React.createElement(node.tag, _objectSpread(_objectSpread({\n    key\n  }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map((child, index) => generate(child, \"\".concat(key, \"-\").concat(node.tag, \"-\").concat(index))));\n}\nexport function getSecondaryColor(primaryColor) {\n  // choose the second color\n  return generateColor(primaryColor)[0];\n}\nexport function normalizeTwoToneColors(twoToneColor) {\n  if (!twoToneColor) {\n    return [];\n  }\n  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];\n}\n\n// These props make sure that the SVG behaviours like general text.\n// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\nexport const svgBaseProps = {\n  width: '1em',\n  height: '1em',\n  fill: 'currentColor',\n  'aria-hidden': 'true',\n  focusable: 'false'\n};\nexport const iconStyles = \"\\n.anticon {\\n  display: inline-flex;\\n  align-items: center;\\n  color: inherit;\\n  font-style: normal;\\n  line-height: 0;\\n  text-align: center;\\n  text-transform: none;\\n  vertical-align: -0.125em;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n.anticon > * {\\n  line-height: 1;\\n}\\n\\n.anticon svg {\\n  display: inline-block;\\n}\\n\\n.anticon::before {\\n  display: none;\\n}\\n\\n.anticon .anticon-icon {\\n  display: block;\\n}\\n\\n.anticon[tabindex] {\\n  cursor: pointer;\\n}\\n\\n.anticon-spin::before,\\n.anticon-spin {\\n  display: inline-block;\\n  -webkit-animation: loadingCircle 1s infinite linear;\\n  animation: loadingCircle 1s infinite linear;\\n}\\n\\n@-webkit-keyframes loadingCircle {\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes loadingCircle {\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\";\nexport const useInsertStyles = eleRef => {\n  const {\n    csp,\n    prefixCls,\n    layer\n  } = useContext(IconContext);\n  let mergedStyleStr = iconStyles;\n  if (prefixCls) {\n    mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);\n  }\n  if (layer) {\n    mergedStyleStr = \"@layer \".concat(layer, \" {\\n\").concat(mergedStyleStr, \"\\n}\");\n  }\n  useEffect(() => {\n    const ele = eleRef.current;\n    const shadowRoot = getShadowRoot(ele);\n    updateCSS(mergedStyleStr, '@ant-design-icons', {\n      prepend: !layer,\n      csp,\n      attachTo: shadowRoot\n    });\n  }, []);\n};","map":{"version":3,"names":["generate","generateColor","updateCSS","getShadowRoot","warn","React","useContext","useEffect","IconContext","camelCase","input","replace","match","g","toUpperCase","warning","valid","message","concat","isIconDefinition","target","name","theme","icon","normalizeAttrs","attrs","arguments","length","undefined","Object","keys","reduce","acc","key","val","className","class","node","rootProps","createElement","tag","_objectSpread","children","map","child","index","getSecondaryColor","primaryColor","normalizeTwoToneColors","twoToneColor","Array","isArray","svgBaseProps","width","height","fill","focusable","iconStyles","useInsertStyles","eleRef","csp","prefixCls","layer","mergedStyleStr","ele","current","shadowRoot","prepend","attachTo"],"sources":["/Users/daniel/Desktop/chat-response/node_modules/@ant-design/icons/es/utils.js"],"sourcesContent":["import { generate as generateColor } from '@ant-design/colors';\nimport { updateCSS } from \"@rc-component/util/es/Dom/dynamicCSS\";\nimport { getShadowRoot } from \"@rc-component/util/es/Dom/shadow\";\nimport warn from \"@rc-component/util/es/warning\";\nimport React, { useContext, useEffect } from 'react';\nimport IconContext from \"./components/Context\";\nfunction camelCase(input) {\n  return input.replace(/-(.)/g, (match, g) => g.toUpperCase());\n}\nexport function warning(valid, message) {\n  warn(valid, `[@ant-design/icons] ${message}`);\n}\nexport function isIconDefinition(target) {\n  return typeof target === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (typeof target.icon === 'object' || typeof target.icon === 'function');\n}\nexport function normalizeAttrs(attrs = {}) {\n  return Object.keys(attrs).reduce((acc, key) => {\n    const val = attrs[key];\n    switch (key) {\n      case 'class':\n        acc.className = val;\n        delete acc.class;\n        break;\n      default:\n        delete acc[key];\n        acc[camelCase(key)] = val;\n    }\n    return acc;\n  }, {});\n}\nexport function generate(node, key, rootProps) {\n  if (!rootProps) {\n    return /*#__PURE__*/React.createElement(node.tag, {\n      key,\n      ...normalizeAttrs(node.attrs)\n    }, (node.children || []).map((child, index) => generate(child, `${key}-${node.tag}-${index}`)));\n  }\n  return /*#__PURE__*/React.createElement(node.tag, {\n    key,\n    ...normalizeAttrs(node.attrs),\n    ...rootProps\n  }, (node.children || []).map((child, index) => generate(child, `${key}-${node.tag}-${index}`)));\n}\nexport function getSecondaryColor(primaryColor) {\n  // choose the second color\n  return generateColor(primaryColor)[0];\n}\nexport function normalizeTwoToneColors(twoToneColor) {\n  if (!twoToneColor) {\n    return [];\n  }\n  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];\n}\n\n// These props make sure that the SVG behaviours like general text.\n// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\nexport const svgBaseProps = {\n  width: '1em',\n  height: '1em',\n  fill: 'currentColor',\n  'aria-hidden': 'true',\n  focusable: 'false'\n};\nexport const iconStyles = `\n.anticon {\n  display: inline-flex;\n  align-items: center;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n`;\nexport const useInsertStyles = eleRef => {\n  const {\n    csp,\n    prefixCls,\n    layer\n  } = useContext(IconContext);\n  let mergedStyleStr = iconStyles;\n  if (prefixCls) {\n    mergedStyleStr = mergedStyleStr.replace(/anticon/g, prefixCls);\n  }\n  if (layer) {\n    mergedStyleStr = `@layer ${layer} {\\n${mergedStyleStr}\\n}`;\n  }\n  useEffect(() => {\n    const ele = eleRef.current;\n    const shadowRoot = getShadowRoot(ele);\n    updateCSS(mergedStyleStr, '@ant-design-icons', {\n      prepend: !layer,\n      csp,\n      attachTo: shadowRoot\n    });\n  }, []);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}